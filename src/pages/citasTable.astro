---
import LayoutCommon from "../app/LayoutCommon.astro";
import LayoutProtected from "../app/LayoutProtected.astro";

interface Consulta {
  _id: string;
  fecha: string;
  pacienteId: {
    id: string;
    nombre: string;
  };
  medicoId: {
    _id: string;
    nombre: string;
    especialidad?: string;
  };
  motivo: string;
  tratamientos: string[];
  estado: 'pendiente' | 'completada' | 'cancelada';
}
---

<LayoutProtected>
<LayoutCommon>
  <div class="min-h-screen bg-gradient-to-r from-slate-100 to-slate-200 p-4 text-slate-800 dark:from-slate-900 dark:to-slate-800 dark:text-slate-100 lg:p-16">
    <div class="mx-auto max-w-6xl">
      <!-- Header -->
      <div class="mb-6 flex items-center justify-between">
        <div class="flex items-center gap-4">
          <button id="volverBtn" class="text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300">
            ← Volver al inicio
          </button>
          <h1 class="text-2xl font-bold">Citas Odontológicas</h1>
        </div>
        <button id="nuevaConsultaBtn" class="rounded-lg bg-blue-600 px-4 py-2 text-white hover:bg-blue-700">
          Nueva Cita
        </button>
      </div>

      <!-- Filtros y Búsqueda -->
      <div class="mb-6 grid gap-4 md:grid-cols-3">
        <div class="space-y-2">
          <label for="searchInput" class="block text-sm font-medium">Buscar</label>
          <input
            type="text"
            id="searchInput"
            placeholder="Buscar por nombre o ID..."
            class="w-full rounded-lg border border-gray-300 p-2 dark:border-gray-600 dark:bg-gray-700"
          />
        </div>
        
        <div class="space-y-2">
          <label for="estadoFilter" class="block text-sm font-medium">Estado</label>
          <select
            id="estadoFilter"
            class="w-full rounded-lg border border-gray-300 p-2 dark:border-gray-600 dark:bg-gray-700"
          >
            <option value="">Todos</option>
            <option value="pendiente">Pendiente</option>
            <option value="en_proceso">En Proceso</option>
            <option value="completada">Completada</option>
          </select>
        </div>
      </div>

      <!-- Tabla de Consultas -->
      <div class="overflow-x-auto rounded-lg bg-white shadow-xl dark:bg-gray-800">
        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
          <thead class="bg-gray-50 dark:bg-gray-700">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-300">Fecha</th>
              <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-300">Hora</th>
              <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-300">Paciente</th>
              <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-300">Médico</th>
              <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-300">Problema</th>
              <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-300">Estado</th>
              <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-300">Acciones</th>
            </tr>
          </thead>
          <tbody id="consultasTableBody" class="divide-y divide-gray-200 bg-white dark:divide-gray-700 dark:bg-gray-800">
            <!-- Se llena dinámicamente -->
          </tbody>
        </table>
      </div>
    </div>
  </div>


<!-- Modal de Edición -->
<div id="editModal" class="fixed inset-0 flex items-center justify-center z-50 hidden">
  <div class="absolute inset-0 bg-black opacity-50"></div>
  <div class="relative bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 w-1/2">
    <h2 class="text-lg font-bold text-gray-800 dark:text-gray-100 mb-4">Editar Cita</h2>
    <form id="editForm" class="space-y-6">
      <input type="hidden" name="id" />
      <div class="space-y-4">
        <div class="grid grid-cols-1 gap-4 md:grid-cols-2">
          <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Nombre del Paciente
            </label>
            <select
              name="nombrePaciente"
              required
              class="mt-1 w-full rounded-md border border-gray-300 bg-white p-2 text-gray-900 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100 focus:border-blue-500 focus:ring-blue-500"
            >
              <option value="">Seleccione un paciente</option>
            </select>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Médico
            </label>
            <select
              name="nombreMedico"
              required
              class="mt-1 w-full rounded-md border border-gray-300 bg-white p-2 text-gray-900 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100 focus:border-blue-500 focus:ring-blue-500"
            >
              <option value="">Seleccione un médico</option>
            </select>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Día de Cita
            </label>
            <input
              type="date"
              name="diaConsulta"
              required
              class="mt-1 w-full rounded-md border border-gray-300 bg-white p-2 text-gray-900 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100"
            />
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Hora de Consulta
            </label>
            <input
              type="time"
              name="horaConsulta"
              required
              class="mt-1 w-full rounded-md border border-gray-300 bg-white p-2 text-gray-900 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100"
            />
          </div>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Problema
          </label>
          <textarea
            name="problema"
            rows="3"
            required
            class="mt-1 w-full rounded-md border border-gray-300 bg-white p-2 text-gray-900 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100"
          ></textarea>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Tratamientos
          </label>
          <div id="tratamientosEditContainer" class="space-y-2">
            <div class="flex items-center gap-2">
              <select
  name="tratamientos[]"
  required
  class="mt-1 w-full rounded-md border border-gray-300 bg-white p-2 text-gray-900 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100 focus:border-blue-500 focus:ring-blue-500"
>
  <option value="" class="text-gray-900 dark:text-gray-100">Seleccione un tratamiento</option>
</select>
              <button
                type="button"
                id="addTratamientoEditBtn"
                class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
              >
                +
              </button>
            </div>
          </div>
        </div>
      </div>

      <div class="flex justify-end space-x-4">
        <button
          type="button"
          onclick="closeEditModal()"
          class="rounded-lg bg-gray-200 px-4 py-2 text-gray-700 hover:bg-gray-300 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500"
        >
          Cancelar
        </button>
        <button
          type="submit"
          class="rounded-lg bg-blue-600 px-4 py-2 text-white hover:bg-blue-700"
        >
          Guardar Cambios
        </button>
      </div>
    </form>
  </div>
</div>
</LayoutCommon>
</LayoutProtected>



<script>
const BASE_URL = 'https://consultorio-odontologico-backend-production-b1c8.up.railway.app/api';

  interface Consulta {
    _id: string;
    fecha: string;
    pacienteId: {
      id: string;
      nombre: string;
    };
    medicoId: {
      _id: string;
      nombre: string;
      especialidad?: string;
    };
    motivo: string;
    tratamientos: string[];
    estado: 'pendiente' | 'completada' | 'cancelada';
  }

  let consultas: Consulta[] = [];
  let consultasFiltradas: Consulta[] = [];

  // Funciones de utilidad
  function showNotification(message: string, type: 'success' | 'error' = 'success') {
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 text-white ${
      type === 'success' ? 'bg-green-500' : 'bg-red-500'
    }`;
    notification.textContent = message;
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
  }

  function getEstadoClase(estado: string): string {
    const clases = {
      pendiente: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',
			en_proceso: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',
      completada: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
    };
    return clases[estado as keyof typeof clases] || '';
  }

  // Funciones principales
  async function cargarConsultas() {
    try {
      const response = await fetch(`${BASE_URL}/citas/todas`);
      if (!response.ok) throw new Error('Error al obtener citas');
      
      const data = await response.json();
      console.log('Citas cargadas:', data);

      consultas = data;
      consultasFiltradas = [...consultas];
      renderizarTabla();
    } catch (error) {
      console.error('Error:', error);
      showNotification('Error al cargar las consultas', 'error');
    }
  }

	function renderizarTabla() {
  const tbody = document.getElementById('consultasTableBody');
  if (!tbody) return;

  // Agregar th en el thead
  const thead = document.querySelector('thead tr');
  if (thead && !thead.querySelector('th:last-child')) {
    const th = document.createElement('th');
    th.className = 'px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-300';
    th.textContent = 'Ver más';
    thead.appendChild(th);
  }

  tbody.innerHTML = consultasFiltradas.map(consulta => `
    <tr class="hover:bg-gray-50 dark:hover:bg-gray-700">
      <td class="whitespace-nowrap px-6 py-4">${new Date(consulta.fecha).toLocaleDateString() || ''}</td>
      <td class="whitespace-nowrap px-6 py-4">${new Date(consulta.fecha).toLocaleTimeString() || ''}</td>
      <td class="whitespace-nowrap px-6 py-4">${consulta.pacienteId?.nombre || ''}</td>
      <td class="whitespace-nowrap px-6 py-4">${consulta.medicoId?.nombre || ''}</td>
      <td class="whitespace-nowrap px-6 py-4">${consulta.motivo || ''}</td>
      <td class="whitespace-nowrap px-6 py-4">
        <span class="rounded-full px-2 py-1 text-xs font-semibold ${getEstadoClase(consulta.estado)}">
          ${consulta.estado || ''}
        </span>
				</td>
      <td class="px-6 py-4">
        <div class="flex space-x-2">
          <button onclick="openEditModal(${JSON.stringify(consulta).replace(/"/g, '&quot;')})"
                class="edit-button p-2 text-blue-600 hover:text-blue-700">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
              <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
            </svg>
          </button>
          <button onclick="eliminarCita('${consulta._id}')"
                class="delete-button p-2 text-red-600 hover:text-red-700">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <path d="M3 6h18"/>
              <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"/>
              <path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/>
            </svg>
          </button>
        </div>
      </td>
    </tr>
  `).join('');
}

  function filtrarConsultas() {
    const searchTerm = (document.getElementById('searchInput') as HTMLInputElement)?.value.toLowerCase();
    const estadoFilter = (document.getElementById('estadoFilter') as HTMLSelectElement)?.value;

    consultasFiltradas = consultas.filter(consulta => {
      const cumpleBusqueda = !searchTerm || 
        consulta.pacienteId?.nombre.toLowerCase().includes(searchTerm) || 
        consulta.medicoId?.nombre.toLowerCase().includes(searchTerm);
      
      const cumpleEstado = !estadoFilter || consulta.estado === estadoFilter;

      return cumpleBusqueda && cumpleEstado;
    });

    renderizarTabla();
  }

  async function eliminarCita(id: string) {
    if (!confirm('¿Está seguro que desea eliminar esta cita?')) return;
    
    try {
      const response = await fetch(`${BASE_URL}/citas/${id}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'Origin': 'http://localhost:4321'
        }
      });

      if (!response.ok) throw new Error('Error al eliminar la cita');

      consultas = consultas.filter(consulta => consulta._id !== id);
      consultasFiltradas = consultasFiltradas.filter(consulta => consulta._id !== id);
      renderizarTabla();
      showNotification('Cita eliminada exitosamente');
    } catch (error) {
      console.error('Error:', error);
      showNotification('Error al eliminar la cita', 'error');
    }
  }

  async function cargarTratamientoEdit(selectElement: HTMLSelectElement) {
  try {
    const response = await fetch(`${BASE_URL}/tratamientos`);
    if (!response.ok) throw new Error('Error al cargar tratamientos');

    const data = await response.json();
    console.log('Tratamientos cargados:', data); // Debug

    selectElement.innerHTML = '<option value="">Seleccione un tratamiento</option>';
    data.forEach((tratamiento: any) => {
      const option = document.createElement('option');
      option.value = tratamiento._id;
      option.textContent = tratamiento.nombre || tratamiento.nombreTratamiento;
			option.className = 'text-gray-900 dark:text-gray-100';
      selectElement.appendChild(option);
    });
  } catch (error) {
    console.error('Error al cargar tratamientos:', error);
    showNotification('Error al cargar tratamientos', 'error');
  }
}

  async function cargarMedicos() {
    try {
      const response = await fetch(`${BASE_URL}/medico`);
      if (!response.ok) throw new Error('Error al cargar médicos');

      const data = await response.json();
      const medicos = data.medicos;
      const selectMedico = document.querySelector('select[name="nombreMedico"]');

      if (selectMedico) {
        selectMedico.innerHTML = '<option value="">Seleccione un médico</option>';
        medicos.forEach((medico: any) => {
          const option = document.createElement('option');
          option.value = medico._id;
          option.textContent = `${medico.nombre} - ${medico.especialidad}`;
          selectMedico.appendChild(option);
        });
      }
    } catch (error) {
      console.error('Error:', error);
      showNotification('Error al cargar médicos', 'error');
    }
  }

  async function cargarPacientes() {
    try {
      const response = await fetch(`${BASE_URL}/paciente`);
      if (!response.ok) throw new Error('Error al cargar pacientes');

      const data = await response.json();
      const selectPaciente = document.querySelector('select[name="nombrePaciente"]');

      if (selectPaciente) {
        selectPaciente.innerHTML = '<option value="">Seleccione un paciente</option>';
        data.pacientes.forEach((paciente: any) => {
          const option = document.createElement('option');
          option.value = paciente.id;
          option.textContent = `${paciente.nombre} - DNI: ${paciente.dni}`;
          selectPaciente.appendChild(option);
        });
      }
    } catch (error) {
      console.error('Error:', error);
      showNotification('Error al cargar pacientes', 'error');
    }
  }

	function setupTratamientosEdit() {
  document.getElementById('addTratamientoEditBtn')?.addEventListener('click', () => {
    const tratamientosContainer = document.getElementById('tratamientosEditContainer');

    const tratamientoGroup = document.createElement('div');
    tratamientoGroup.classList.add('flex', 'items-center', 'gap-2', 'mt-2');

    const select = document.createElement('select');
    select.name = 'tratamientos[]';
    select.required = true;
		select.classList.add(
      'w-full',
      'rounded-md',
      'border',
      'border-gray-300',
      'bg-white',
      'p-2',
      'text-gray-900',
      'dark:text-gray-100',
      'dark:border-gray-600',
      'dark:bg-gray-700',
      'focus:border-blue-500',
      'focus:ring-blue-500'
    );

    const removeButton = document.createElement('button');
    removeButton.type = 'button';
    removeButton.classList.add(
      'px-4',
      'py-2',
      'bg-red-600',
      'text-white',
      'rounded-md',
      'hover:bg-red-700'
    );
    removeButton.textContent = '-';
    removeButton.addEventListener('click', () => {
      tratamientoGroup.remove();
    });

    tratamientoGroup.appendChild(select);
    tratamientoGroup.appendChild(removeButton);
    tratamientosContainer?.appendChild(tratamientoGroup);

    cargarTratamientoEdit(select);
  });
}

	async function openEditModal(cita: any) {
    console.log('Cita a editar:', cita);
    
    const modal = document.getElementById('editModal');
    const form = document.getElementById('editForm') as HTMLFormElement;
    
    await Promise.all([
      cargarMedicos(),
      cargarPacientes()
    ]);
    
    if (form) {
      try {
        const fecha = new Date(cita.fecha);
        const dia = fecha.toISOString().split('T')[0];
        const hora = fecha.toTimeString().slice(0,5);
        
        form.elements.namedItem('id').value = cita._id;
        form.elements.namedItem('diaConsulta').value = dia;
        form.elements.namedItem('horaConsulta').value = hora;
        form.elements.namedItem('nombrePaciente').value = cita.pacienteId.id;
        form.elements.namedItem('nombreMedico').value = cita.medicoId._id;
        form.elements.namedItem('problema').value = cita.motivo;

        // Limpiar tratamientos anteriores
        const tratamientosContainer = document.getElementById('tratamientosEditContainer');
        if (tratamientosContainer) {
          tratamientosContainer.innerHTML = '';
        }

        // Crear primer grupo de tratamiento
        const primerGrupo = document.createElement('div');
        primerGrupo.classList.add('flex', 'items-center', 'gap-2');
        primerGrupo.innerHTML = `
           <select
    name="tratamientos[]"
    required
    class="mt-1 w-full rounded-md border border-gray-300 bg-white p-2 text-gray-900 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100 focus:border-blue-500 focus:ring-blue-500"
  >
            <option value="">Seleccione un tratamiento</option>
          </select>
          <button
            type="button"
            id="addTratamientoEditBtn"
            class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
          >
            +
          </button>
        `;
        tratamientosContainer?.appendChild(primerGrupo);
        const primerSelect = primerGrupo.querySelector('select');
        if (primerSelect) {
          await cargarTratamientoEdit(primerSelect);
        }

        // Crear un select por cada tratamiento existente
        if (Array.isArray(cita.tratamientos) && cita.tratamientos.length > 0) {
          console.log('Tratamientos a cargar:', cita.tratamientos);
          
          for (const tratamiento of cita.tratamientos) {
            const tratamientoId = typeof tratamiento === 'string' ? tratamiento : tratamiento._id;
            if (tratamientoId) {
              if (primerSelect && !primerSelect.value) {
                // Usar el primer select si está vacío
                primerSelect.value = tratamientoId;
              } else {
                // Crear nuevo grupo de tratamiento
                const tratamientoGroup = document.createElement('div');
                tratamientoGroup.classList.add('flex', 'items-center', 'gap-2', 'mt-2');

								const select = document.createElement('select');
select.name = 'tratamientos[]';
select.required = true;
select.classList.add(
  'w-full',
  'rounded-md',
  'border',
  'border-gray-300',
  'bg-white',
  'p-2',
  'text-gray-900',
  'dark:text-gray-100',
  'dark:border-gray-600',
  'dark:bg-gray-700',
  'focus:border-blue-500',
  'focus:ring-blue-500'
);
                await cargarTratamientoEdit(select);
                select.value = tratamientoId;

                const removeButton = document.createElement('button');
                removeButton.type = 'button';
                removeButton.classList.add(
                  'px-4',
                  'py-2',
                  'bg-red-600',
                  'text-white',
                  'rounded-md',
                  'hover:bg-red-700'
                );
                removeButton.textContent = '-';
                removeButton.addEventListener('click', () => {
                  tratamientoGroup.remove();
                });

                tratamientoGroup.appendChild(select);
                tratamientoGroup.appendChild(removeButton);
                tratamientosContainer?.appendChild(tratamientoGroup);
              }
            }
          }
        }

        // Reconfigurar el botón de agregar tratamiento
        setupTratamientosEdit();
        modal?.classList.remove('hidden');
      } catch (error) {
        console.error('Error al cargar el formulario:', error);
        showNotification('Error al cargar los datos de la cita', 'error');
      }
    }
  }

	async function handleEditFormSubmit(e: SubmitEvent) {
  e.preventDefault();
  
  try {
    const form = e.target as HTMLFormElement;
    const formData = new FormData(form);
    
    // Obtener la cita actual para mantener su estado
    const citaId = formData.get('id');
    const citaActual = consultas.find(c => c._id === citaId);
    
    const tratamientosSelects = form.querySelectorAll('select[name="tratamientos[]"]');
    const tratamientos = Array.from(tratamientosSelects)
      .map((select: HTMLSelectElement) => select.value)
      .filter(value => value !== '')
      .map(id => ({ _id: id }));
    
    const citaData = {
      _id: citaId,
      fecha: new Date(`${formData.get('diaConsulta')}T${formData.get('horaConsulta')}`).toISOString(),
      pacienteId: formData.get('nombrePaciente'),
      medicoId: formData.get('nombreMedico'),
      motivo: formData.get('problema'),
      tratamientos: tratamientos,
      estado: citaActual?.estado || 'pendiente' // Mantener el estado actual
    };

    if (!citaData.pacienteId || !citaData.medicoId || !citaData.motivo || !citaData.fecha) {
      throw new Error('Todos los campos son requeridos');
    }

    const response = await fetch(`${BASE_URL}/citas/${citaData._id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Origin': 'http://localhost:4321'
      },
      body: JSON.stringify(citaData)
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Error al actualizar la cita');
    }

    await cargarConsultas();
    closeEditModal();
    showNotification('Cita actualizada exitosamente');
    
    setTimeout(() => {
      window.location.reload();
    }, 1000);

  } catch (error: any) {
    console.error('Error completo:', error);
    showNotification(error.message || 'Error al actualizar la cita', 'error');
  }
}

  function closeEditModal() {
    const modal = document.getElementById('editModal');
    const form = document.getElementById('editForm');
    
    modal?.classList.add('hidden');
    form?.reset();

    // Limpiar los tratamientos
    const tratamientosContainer = document.getElementById('tratamientosEditContainer');
		if (tratamientosContainer) {
    const nuevoGrupo = document.createElement('div');
    nuevoGrupo.classList.add('flex', 'items-center', 'gap-2');
    nuevoGrupo.innerHTML = `
      <select
        name="tratamientos[]"
        required
        // CAMBIAR ESTA CLASE:
        class="mt-1 w-full rounded-md border border-gray-300 bg-white p-2 text-gray-900 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100 focus:border-blue-500 focus:ring-blue-500"
      >
        <option value="" class="text-gray-900 dark:text-gray-100">Seleccione un tratamiento</option>
      </select>
      <button
        type="button"
        id="addTratamientoEditBtn"
        class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
      >
        +
      </button>
    `;
        tratamientosContainer.appendChild(nuevoGrupo);
        cargarTratamientoEdit(nuevoGrupo.querySelector('select')!);
        setupTratamientosEdit();
      }
    }

  function setupEventListeners() {
    document.getElementById('searchInput')?.addEventListener('input', filtrarConsultas);
    document.getElementById('estadoFilter')?.addEventListener('change', filtrarConsultas);
    
    document.getElementById('nuevaConsultaBtn')?.addEventListener('click', () => {
      window.location.href = '/nueva-cita';
    });
    
    document.getElementById('volverBtn')?.addEventListener('click', () => {
      window.location.href = '/';
    });

    document.getElementById('editForm')?.addEventListener('submit', handleEditFormSubmit);

    // Manejo del modal
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') closeEditModal();
    });

    document.addEventListener('click', (e) => {
      const modal = document.getElementById('editModal');
      if (e.target === modal) closeEditModal();
    });
  }

  // Exponer funciones necesarias globalmente
  window.eliminarCita = eliminarCita;
  window.openEditModal = openEditModal;
  window.closeEditModal = closeEditModal;

  // Inicializar
  document.addEventListener('DOMContentLoaded', () => {
    cargarConsultas();
    setupEventListeners();
    setupTratamientosEdit();
  });
</script>
