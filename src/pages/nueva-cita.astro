---
import LayoutCommon from "../app/LayoutCommon.astro";
import LayoutProtected from "../app/LayoutProtected.astro";
---

<LayoutProtected>
<LayoutCommon>
  <div class="min-h-screen bg-gradient-to-r from-slate-100 to-slate-200 p-4 text-slate-800 dark:from-slate-900 dark:to-slate-800 dark:text-slate-100 lg:p-16">
    <div class="mx-auto max-w-4xl">
      <div class="mb-8">
        <button id="volverBtn" class="text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300">
          ← Volver a citas
        </button>
      </div>

      <div class="rounded-lg bg-white p-6 shadow-xl dark:bg-gray-800">
        <h1 class="mb-6 text-2xl font-bold">Nueva Cita</h1>
        
        <form id="nuevaConsultaForm" class="space-y-6">
          <div class="space-y-4">
            <div class="grid grid-cols-1 gap-4 md:grid-cols-2">
              <div>
                <label for="nombrePaciente" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Nombre del Paciente
                </label>
                <select
                  id="nombrePaciente"
                  name="nombrePaciente"
                  required
                  class="mt-1 w-full rounded-md border border-gray-300 bg-white p-2 dark:border-gray-600 dark:bg-gray-700 focus:border-blue-500 focus:ring-blue-500"
                >
                  <option value="">Seleccione un paciente</option>
                </select>
              </div>
      
              <div>
                <label for="nombreMedico" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Médico
                </label>
                <select
                  id="nombreMedico"
                  name="nombreMedico"
                  required
                  class="mt-1 w-full rounded-md border border-gray-300 bg-white p-2 dark:border-gray-600 dark:bg-gray-700 focus:border-blue-500 focus:ring-blue-500"
                >
                  <option value="">Seleccione un médico</option>
                </select>
              </div>
      
              <div>
                <label for="diaConsulta" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Día de Cita
                </label>
                <input
                  type="date"
                  id="diaConsulta"
                  name="diaConsulta"
                  required
                  class="mt-1 w-full rounded-md border border-gray-300 bg-white p-2 dark:border-gray-600 dark:bg-gray-700"
                />
              </div>
      
              <div>
                <label for="horaConsulta" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Hora de Consulta
                </label>
                <input
                  type="time"
                  id="horaConsulta"
                  name="horaConsulta"
                  required
                  class="mt-1 w-full rounded-md border border-gray-300 bg-white p-2 dark:border-gray-600 dark:bg-gray-700"
                />
              </div>
            </div>
      
            <div>
              <label for="problema" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Problema
              </label>
              <textarea
                id="problema"
                name="problema"
                rows="3"
                required
                class="mt-1 w-full rounded-md border border-gray-300 bg-white p-2 dark:border-gray-600 dark:bg-gray-700"
              ></textarea>
            </div>
      
						<div>
              <label for="tratamientos" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Tratamientos
              </label>
              <div id="tratamientosContainer" class="space-y-2">
                <div class="flex items-center gap-2">
                  <select
                    name="tratamientos[]"
                    required
                    class="mt-1 w-full rounded-md border border-gray-300 bg-white p-2 dark:border-gray-600 dark:bg-gray-700 focus:border-blue-500 focus:ring-blue-500"
                  >
                    <option value="">Seleccione un tratamiento</option>
                  </select>
                  <button
                    type="button"
                    id="addTratamientoBtn"
                    class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                  >
                    +
                  </button>
                </div>
              </div>
            </div>
          </div>
      
          <div class="flex justify-end space-x-4">
            <button
              type="button"
              id="cancelarBtn"
              class="rounded-lg bg-gray-200 px-4 py-2 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300"
            >
              Cancelar
            </button>
            <button
              type="submit"
              class="rounded-lg bg-blue-600 px-4 py-2 text-white hover:bg-blue-700"
            >
              Crear Consulta
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</LayoutCommon>
</LayoutProtected>

<script>
	const BASE_URL = 'https://consultorio-odontologico-backend-production-b1c8.up.railway.app/api';
  const form = document.getElementById('nuevaConsultaForm');
  const volverBtn = document.getElementById('volverBtn');
  const cancelarBtn = document.getElementById('cancelarBtn');

	form?.addEventListener('submit', async (e) => {
  e.preventDefault();
  try {
    const formData = new FormData(form);
    const pacienteDataString = formData.get('nombrePaciente');
    
    if (!pacienteDataString) {
      throw new Error('No se seleccionó ningún paciente');
    }

    const pacienteData = JSON.parse(pacienteDataString);
    
    // Obtener y procesar los tratamientos seleccionados
    const tratamientosSelects = form.querySelectorAll('select[name="tratamientos[]"]');
    const tratamientos = Array.from(tratamientosSelects)
      .map(select => {
        if (select.value) {
          // Parsear el JSON almacenado en el value
          return JSON.parse(select.value);
        }
        return null;
      })
      .filter(tratamiento => tratamiento !== null); // Eliminar valores nulos

    const citaData = {
      pacienteId: pacienteData.id,
      medicoId: formData.get('nombreMedico'),
      fecha: new Date(`${formData.get('diaConsulta')}T${formData.get('horaConsulta')}`).toISOString(),
      motivo: formData.get('problema'),
      estado: 'pendiente',
      notas: formData.get('problema'),
      monto: 0,
      tratamientos: tratamientos // Ahora incluye todos los campos necesarios
    };

    console.log('citaData being sent:', citaData);

    const response = await fetch(`${BASE_URL}/citas/create`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Origin': 'http://localhost:4321'
      },
      body: JSON.stringify(citaData)
    });

    const responseData = await response.json();
    console.log('Server response:', responseData);

    if (!response.ok) throw new Error(responseData.message || 'Error al crear la cita');

    showNotification('Cita creada exitosamente');
    window.location.href = '/citasTable';
  } catch (error) {
    console.error('Error completo:', error);
    showNotification(error.message, 'error');
  }
});

  volverBtn?.addEventListener('click', () => {
    window.location.href = '/citasTable';
  });

  cancelarBtn?.addEventListener('click', () => {
    if (confirm('¿Está seguro que desea cancelar? Se perderán los datos ingresados.')) {
      window.location.href = '/citasTable';
    }
  });

  document.getElementById('addTratamientoBtn')?.addEventListener('click', () => {
    const tratamientosContainer = document.getElementById('tratamientosContainer');

    const tratamientoGroup = document.createElement('div');
    tratamientoGroup.classList.add('flex', 'items-center', 'gap-2', 'mt-2');

    const select = document.createElement('select');
    select.name = 'tratamientos[]';
    select.required = true;
    select.classList.add(
      'w-full',
      'rounded-md',
      'border',
      'border-gray-300',
      'bg-white',
      'p-2',
      'dark:border-gray-600',
      'dark:bg-gray-700',
      'focus:border-blue-500',
      'focus:ring-blue-500'
    );

    const defaultOption = document.createElement('option');
    defaultOption.value = '';
    defaultOption.textContent = 'Seleccione un tratamiento';
    select.appendChild(defaultOption);

    const removeButton = document.createElement('button');
    removeButton.type = 'button';
    removeButton.classList.add(
      'px-4',
      'py-2',
      'bg-red-600',
      'text-white',
      'rounded-md',
      'hover:bg-red-700'
    );
    removeButton.textContent = '-';
    removeButton.addEventListener('click', () => {
      tratamientoGroup.remove();
    });

    tratamientoGroup.appendChild(select);
    tratamientoGroup.appendChild(removeButton);
    tratamientosContainer?.appendChild(tratamientoGroup);

    cargarTratamientos(select);
  });

	

	async function cargarTratamientos(selectElement) {
  try {
    const response = await fetch(`${BASE_URL}/tratamientos`);
    if (!response.ok) throw new Error('Error al cargar tratamientos');

    const data = await response.json();
    data.forEach((tratamiento) => {
      const option = document.createElement('option');
      // Guardar el objeto tratamiento completo como valor
      option.value = JSON.stringify({
        _id: tratamiento._id,
        nombre: tratamiento.nombre,
        descripcion: tratamiento.descripcion
      });
      option.textContent = tratamiento.nombre;
      option.className = 'text-gray-900 dark:text-gray-100';
      selectElement.appendChild(option);
    });
  } catch (error) {
    console.error('Error al cargar tratamientos:', error);
    alert('Error al cargar la lista de tratamientos: ' + error.message);
  }
}

async function cargarMedicos() {
  try {
    const response = await fetch(`${BASE_URL}/medico`);
    if (!response.ok) throw new Error('Error al cargar médicos');

    const data = await response.json();
    const medicos = data.medicos;
    const selectMedico = document.getElementById('nombreMedico');

    if (selectMedico) {
      medicos.forEach((medico) => {
        const option = document.createElement('option');
        option.value = medico._id; // Usar el ID del médico
        option.textContent = `${medico.nombre} - ${medico.especialidad}`;
        selectMedico.appendChild(option);
      });
    }
  } catch (error) {
    console.error('Error:', error);
    showNotification('Error al cargar médicos', 'error');
  }
}

async function cargarPacientes() {
  try {
    const response = await fetch(`${BASE_URL}/paciente`);
    if (!response.ok) throw new Error('Error al cargar pacientes');

    const data = await response.json();
    const selectPaciente = document.getElementById('nombrePaciente');

    data.pacientes.forEach(paciente => {
      const option = document.createElement('option');
      const pacienteData = {
        id: paciente.id, 
        nombre: paciente.nombre,
        areaCode: paciente.areaCode,
        telefono: paciente.telefono
      };
      
      option.value = JSON.stringify(pacienteData);
      option.textContent = `${paciente.nombre} - DNI: ${paciente.dni}`;
      selectPaciente.appendChild(option);
    });
  } catch (error) {
    console.error('Error al cargar pacientes:', error);
    showNotification('Error al cargar pacientes: ' + error.message, 'error');
  }
}

  document.addEventListener('DOMContentLoaded', () => {
    cargarMedicos();
    cargarPacientes();
    cargarTratamientos(document.querySelector('select[name="tratamientos[]"]'));
  });

	function showNotification(message, type = 'success') {
  const notification = document.createElement('div');
  notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 text-white ${
    type === 'success' ? 'bg-green-500' : 'bg-red-500'
  }`;
  notification.textContent = message;
  document.body.appendChild(notification);
  setTimeout(() => notification.remove(), 3000);
}
</script>

