---
---

<div class="bg-gradient-to-r from-slate-100 to-slate-200 dark:from-slate-900 dark:to-slate-800 text-slate-800 dark:text-slate-100 mb-20 p-4 lg:p-16 shadow-xl shadow-slate-200 dark:shadow-slate-900 min-h-screen flex items-center justify-center">
  <header class="p-8 flex flex-col items-center w-full space-y-8">
    <div class="flex flex-col md:flex-row justify-between items-center w-full mb-4 gap-4">
      <h1 class="text-4xl lg:text-5xl dark:text-slate-200 text-slate-600 leading-tight text-center md:text-left">
        Citas
      </h1>
      <div class="relative w-full md:w-auto">
        <input 
          type="text" 
          id="calendar" 
          class="px-4 py-2 w-full md:w-64 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100" 
          placeholder="Selecciona una fecha"
        />
      </div>
    </div>
    <div id="cards-container" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 w-full">
      <!-- Las tarjetas serán añadidas aquí dinámicamente -->
    </div>
  </header>
</div>

<script>
  import flatpickr from 'flatpickr';
  import 'flatpickr/dist/flatpickr.min.css';
  import { Spanish } from 'flatpickr/dist/l10n/es.js';

  const container = document.getElementById("cards-container");
  const BASE_URL = 'https://consultorio-odontologico-backend-production-b1c8.up.railway.app/api';

  function formatDateForAPI(date) {
    const offset = -3;
    const argDate = new Date(date.getTime() + (offset * 60 * 60 * 1000));
    
    const year = argDate.getUTCFullYear();
    const month = String(argDate.getUTCMonth() + 1).padStart(2, '0');
    const day = String(argDate.getUTCDate()).padStart(2, '0');
    
    return `${year}-${month}-${day}`;
  }

  function formatTime(dateString) {
    const date = new Date(dateString);
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    return `${hours}:${minutes}`;
  }

  function getEstadoColor(estado) {
    const colores = {
      'pendiente': 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',
      'en_proceso': 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',
      'completada': 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
    };
    return colores[estado] || colores['pendiente'];
  }

  function getEstadoTexto(estado) {
    const textos = {
      'pendiente': 'Pendiente',
      'en_proceso': 'En Proceso',
      'completada': 'Completada'
    };
    return textos[estado] || 'Pendiente';
  }

  function getWhatsAppLink(paciente, medico, hora, motivo) {
    const telefono = paciente?.telefono?.replace(/\D/g, '');
    const codigoPais = paciente?.areaCode || '+54';
    const telefonoCompleto = `${codigoPais}${telefono}`.replace('+', '');
    
    const mensaje = encodeURIComponent(
      `Hola ${paciente.nombre}, Te habla ${medico.nombre} del consultorio odontológico. Tu cita es hoy a las ${hora}. Motivo de la consulta: ${motivo}. ¡Te esperamos! Muchas Gracias.`
    );
    
    return `https://wa.me/${telefonoCompleto}?text=${mensaje}`;
  }

  window.handleAtenderClick = async function(citaId) {
    try {
      const response = await fetch(`${BASE_URL}/citas/${citaId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          estado: 'en_proceso',
          fecha: new Date(),
          motivo: document.getElementById(`motivo-${citaId}`)?.textContent || '',
          monto: document.getElementById(`monto-${citaId}`)?.textContent?.replace('$', '') || 0
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Error al actualizar el estado de la cita');
      }

      window.location.href = `/consulta?id=${citaId}`;
      
    } catch (error) {
      console.error('Error:', error);
      alert('Ocurrió un error al procesar la cita: ' + error.message);
    }
  }

  async function loadData(selectedDate = new Date()) {
    try {
      const formattedDate = formatDateForAPI(selectedDate);
      console.log('Fecha seleccionada:', selectedDate);
      console.log('Fecha formateada para API:', formattedDate);

      const response = await fetch(`${BASE_URL}/citas/fecha/${formattedDate}`);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      const consultas = data.data;

      container.innerHTML = '';

      if (consultas.length === 0) {
        container.innerHTML = `
          <div class="col-span-full text-center text-gray-500 dark:text-gray-400">
            No hay consultas programadas para esta fecha
          </div>
        `;
        return;
      }

      for (const consulta of consultas) {
        const card = document.createElement("div");
        card.className = "p-6 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 dark:bg-gray-800 space-y-4";

        const mostrarBotonAtender = consulta.estado !== 'completada';
        const mostrarBotonRecordatorio = consulta.estado !== 'completada';

        const botonAtenderHtml = mostrarBotonAtender ? `
          <button 
            onclick="handleAtenderClick('${consulta._id}')"
            class="w-full px-4 py-2 text-white bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors">
            ${consulta.estado === 'en_proceso' ? 'Continuar' : 'Atender'}
          </button>
        ` : '';

        const botonRecordatorioHtml = mostrarBotonRecordatorio ? `
          <button 
            onclick="window.open('${getWhatsAppLink(
              consulta.pacienteId, 
              consulta.medicoId, 
              formatTime(consulta.fecha),
              consulta.motivo
            )}', '_blank')"
            class="px-4 py-2 text-white bg-green-500 hover:bg-green-600 rounded-lg transition-colors"
          >
            Enviar Recordatorio
          </button>
        ` : '';

        card.innerHTML = `
          <div class="space-y-4">
            <div class="flex justify-between items-center gap-2">
              <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200 truncate">
                ${consulta.pacienteId.nombre}
              </h3>
              <span class="text-sm text-gray-500 dark:text-gray-400 whitespace-nowrap">
                ${formatTime(consulta.fecha)}
              </span>
            </div>
            <div class="text-gray-600 dark:text-gray-300">
              <p><strong>Médico:</strong> ${consulta.medicoId.nombre}</p>
              <p><strong>Motivo:</strong> ${consulta.motivo}</p>
            </div>
          </div>
        `;

        // Contenedor de tratamientos
        const tratamientosContainer = document.createElement("div");
        tratamientosContainer.style.display = "none";
        tratamientosContainer.className = "mt-2 space-y-1 text-gray-600 dark:text-gray-300";
        
        // Botón toggle tratamientos
        const toggleTratamientosButton = document.createElement("button");
        toggleTratamientosButton.textContent = "Mostrar tratamientos";
        toggleTratamientosButton.className = "text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-200 mt-2";
        toggleTratamientosButton.addEventListener("click", () => {
          if (tratamientosContainer.style.display === "none") {
            tratamientosContainer.style.display = "block";
            toggleTratamientosButton.textContent = "Ocultar tratamientos";
          } else {
            tratamientosContainer.style.display = "none";
            toggleTratamientosButton.textContent = "Mostrar tratamientos";
          }
        });

        // Cargar tratamientos
        if (Array.isArray(consulta.tratamientos) && consulta.tratamientos.length > 0) {
          tratamientosContainer.innerHTML = '<p>Cargando tratamientos...</p>';
          
          const tratamientosPromises = consulta.tratamientos.map(async (tratamiento) => {
            try {
              if (tratamiento.nombre || tratamiento.nombreTratamiento) {
                return `<p><strong>Tratamiento:</strong> ${tratamiento.nombre || tratamiento.nombreTratamiento}</p>`;
              }

              const tratamientoId = typeof tratamiento === 'string' ? tratamiento : tratamiento._id;
              const response = await fetch(`${BASE_URL}/tratamientos/findById/${tratamientoId}`);
              
              if (!response.ok) throw new Error('Error al cargar tratamiento');
              
              const data = await response.json();
              return `<p><strong>Tratamiento:</strong> ${data.nombre || data.nombreTratamiento}</p>`;
            } catch (error) {
              console.error('Error al cargar tratamiento:', error);
              return `<p><strong>Tratamiento:</strong> No disponible</p>`;
            }
          });

          Promise.all(tratamientosPromises).then(tratamientosResults => {
            tratamientosContainer.innerHTML = tratamientosResults.join('');
          });
        } else {
          tratamientosContainer.innerHTML = '<p>No hay tratamientos asignados</p>';
        }

        // Agregar elementos a la tarjeta
        const infoContainer = card.querySelector('.text-gray-600');
        infoContainer.appendChild(toggleTratamientosButton);
        infoContainer.appendChild(tratamientosContainer);

        // Contenedor de acciones
        const actionsContainer = document.createElement('div');
        actionsContainer.className = 'flex flex-col space-y-2';
        actionsContainer.innerHTML = `
          ${botonRecordatorioHtml}
          ${botonAtenderHtml}
        `;
        card.appendChild(actionsContainer);

        // Contenedor de estado
        const estadoContainer = document.createElement('div');
        estadoContainer.className = 'flex items-center justify-between pt-2';
        estadoContainer.innerHTML = `
          <span class="text-sm font-medium">Estado:</span>
          <span class="px-3 py-1 rounded-full text-sm font-medium ${getEstadoColor(consulta.estado)}">
            ${getEstadoTexto(consulta.estado)}
          </span>
        `;
        card.appendChild(estadoContainer);

        container.appendChild(card);
      }
    } catch (error) {
      console.error("Error al cargar las consultas:", error);
      container.innerHTML = `
        <div class="col-span-full text-center text-red-500">
          Error al cargar las consultas: ${error.message}
        </div>
      `;
    }
  }

  // Inicialización
  document.addEventListener('DOMContentLoaded', () => {
    flatpickr("#calendar", {
      dateFormat: "Y-m-d",
      defaultDate: "today",
      locale: Spanish,
      time_24hr: true,
      enableTime: false,
      onChange: function(selectedDates) {
        if (selectedDates.length > 0) {
          loadData(selectedDates[0]);
        }
      },
      animate: true,
      disableMobile: false,
    });

    // Cargar datos iniciales
    loadData();
  });
</script>

<style>
  /* Estilos base del calendario */
  :global(.flatpickr-calendar) {
    background: #fff;
    border: 1px solid #e2e8f0;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    border-radius: 0.5rem;
  }

  /* Tema oscuro para el calendario */
  :global(.dark .flatpickr-calendar) {
    background: #1e293b !important;
    border-color: #475569 !important;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3);
  }

  /* Encabezado del calendario */
  :global(.dark .flatpickr-months) {
    background: #1e293b !important;
  }

  :global(.dark .flatpickr-months .flatpickr-month) {
    color: #e2e8f0 !important;
    fill: #e2e8f0 !important;
  }

  :global(.dark .flatpickr-months .flatpickr-prev-month, 
          .dark .flatpickr-months .flatpickr-next-month) {
    color: #94a3b8 !important;
    fill: #94a3b8 !important;
  }

  :global(.dark .flatpickr-months .flatpickr-prev-month:hover, 
          .dark .flatpickr-months .flatpickr-next-month:hover) {
    color: #e2e8f0 !important;
    fill: #e2e8f0 !important;
  }

  /* Días de la semana */
  :global(.dark .flatpickr-weekdays) {
    background: #1e293b !important;
  }

  :global(.dark .flatpickr-weekday) {
    color: #94a3b8 !important;
  }

  /* Días del calendario */
  :global(.dark .flatpickr-day) {
    color: #e2e8f0 !important;
    border-color: #334155 !important;
  }

  :global(.dark .flatpickr-day:hover) {
    background: #334155 !important;
  }

  :global(.dark .flatpickr-day.selected) {
    background: #3b82f6 !important;
    border-color: #3b82f6 !important;
    color: #ffffff !important;
  }

  :global(.dark .flatpickr-day.prevMonthDay,
          .dark .flatpickr-day.nextMonthDay) {
    color: #64748b !important;
  }

  :global(.dark .flatpickr-day.disabled) {
    color: #475569 !important;
  }

  /* Tiempo actual */
  :global(.dark .flatpickr-day.today) {
    border-color: #3b82f6 !important;
  }

  :global(.dark .flatpickr-day.today:hover) {
    background: #334155 !important;
    color: #e2e8f0 !important;
  }

	 /* Estilos para el selector de meses */
	 :global(.dark .flatpickr-current-month .flatpickr-monthDropdown-months) {
    background: #1e293b !important;
    color: #e2e8f0 !important;
    border-color: #475569 !important;
  }

  :global(.dark .flatpickr-monthDropdown-month) {
    background: #1e293b !important;
    color: #e2e8f0 !important;
  }

  :global(.dark .flatpickr-monthDropdown-months .flatpickr-monthDropdown-month) {
    background-color: #1e293b !important;
    color: #e2e8f0 !important;
  }

  :global(.dark .flatpickr-monthDropdown-months option) {
    background: #1e293b !important;
    color: #e2e8f0 !important;
  }

  :global(.dark .flatpickr-monthDropdown-months:hover) {
    background: #334155 !important;
  }

  :global(.dark .flatpickr-monthDropdown-months .flatpickr-monthDropdown-month:hover) {
    background: #334155 !important;
  }

  /* Estilos para el input numérico del año */
  :global(.dark .numInputWrapper input) {
    background: #1e293b !important;
    color: #e2e8f0 !important;
  }

  :global(.dark .numInputWrapper span) {
    border-color: #475569 !important;
  }

  :global(.dark .numInputWrapper span:hover) {
    background: #334155 !important;
  }
</style>
